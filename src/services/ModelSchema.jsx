export const ModelSchema = [
  {
    model: "Linear Regression",
    parameters: [
      {
        name: "fit_intercept",
        label: "Fit Intercept",
        description: "Almost always true unless data is already centered",
        type: "boolean",
        default: true,
        advanced: false,
      },
      {
        name: "copy_X",
        label: "Copy X",
        description: "Keep original data intact",
        type: "boolean",
        default: true,
        advanced: true,
      },
      {
        name: "n_jobs",
        label: "Number of Jobs",
        description:
          "-1 uses all cores; limit cores for controlled parallelism",
        type: "select",
        selectType: "single",
        options: [-1, 1, 2, 3, 4],
        default: -1,
        advanced: true,
      },
    ],
  },
  {
    model: "LightGBM",
    parameters: [
      {
        name: "objective",
        label: "Objective",
        description: "Common objectives for regression tasks",
        type: "select",
        selectType: "single",
        options: ["regression", "regression_l1", "huber"],
        default: "regression",
        advanced: false,
      },
      {
        name: "metric",
        label: "Metric",
        description: "Most practical performance metrics",
        type: "select",
        selectType: "multiple", // ✅ allows multiple metrics
        options: ["rmse", "mae"],
        default: "rmse",
        advanced: false,
      },
      {
        name: "boosting_type",
        label: "Boosting Type",
        description: "DART helps with irregular patterns",
        type: "select",
        selectType: "single",
        options: ["gbdt", "dart"],
        default: "gbdt",
        advanced: true,
      },
      {
        name: "num_leaves",
        label: "Number of Leaves",
        description: "Balance between accuracy and overfitting",
        type: "number",
        min: 20,
        max: 80,
        default: 31,
        advanced: false,
      },
      {
        name: "learning_rate",
        label: "Learning Rate",
        description: "Lower = stable; higher = faster but riskier",
        type: "number",
        min: 0.01,
        max: 0.1,
        step: 0.01,
        default: 0.05,
        advanced: false,
      },
      {
        name: "feature_fraction",
        label: "Feature Fraction",
        description: "Feature subsampling for regularization",
        type: "number",
        min: 0.7,
        max: 1.0,
        step: 0.05,
        default: 1.0,
        advanced: true,
      },
      {
        name: "bagging_fraction",
        label: "Bagging Fraction",
        description: "Data subsampling to reduce overfitting",
        type: "number",
        min: 0.7,
        max: 1.0,
        step: 0.05,
        default: 1.0,
        advanced: true,
      },
      {
        name: "bagging_freq",
        label: "Bagging Frequency",
        description: "More frequent bagging reduces overfitting",
        type: "number",
        min: 1,
        max: 10,
        default: 1,
        advanced: true,
      },
      {
        name: "verbose",
        label: "Verbose",
        description: "Silent (-1) or info mode (0)",
        type: "select",
        selectType: "single",
        options: [-1, 0],
        default: -1,
        advanced: true,
      },
      {
        name: "random_state",
        label: "Random State",
        description: "Ensures reproducibility",
        type: "number",
        min: 0,
        max: 9999,
        default: 42,
        advanced: true,
      },
      {
        name: "num_boost_round",
        label: "Number of Boost Rounds",
        description: "Use early stopping for best iteration",
        type: "number",
        min: 100,
        max: 1000,
        step: 50,
        default: 100,
        advanced: false,
      },
      {
        name: "early_stopping_rounds",
        label: "Early Stopping Rounds",
        description: "Stops training if no improvement",
        type: "number",
        min: 10,
        max: 100,
        step: 5,
        default: 50,
        advanced: false,
      },
    ],
  },
  {
    model: "Random Forest",
    parameters: [
      {
        name: "n_estimators",
        label: "Number of Estimators",
        description: "Higher gives stability but costs compute",
        type: "number",
        min: 100,
        max: 1000,
        step: 50,
        default: 100,
        advanced: false,
      },
      {
        name: "max_depth",
        label: "Max Depth",
        description: "None only if data is simple, else limit",
        type: "number",
        min: 5,
        max: 30,
        default: 10,
        advanced: false,
      },
      {
        name: "min_samples_split",
        label: "Min Samples Split",
        description: "Prevent overfitting with higher values",
        type: "number",
        min: 2,
        max: 10,
        default: 2,
        advanced: false,
      },
      {
        name: "min_samples_leaf",
        label: "Min Samples Leaf",
        description: "Larger leaf size smoothens predictions",
        type: "number",
        min: 1,
        max: 5,
        default: 1,
        advanced: false,
      },
      {
        name: "max_features",
        label: "Max Features",
        description: "Controls feature randomness",
        type: "select",
        selectType: "single", // ✅ one choice only
        options: ["sqrt", "log2", 0.2, 0.4, 0.6, 0.8],
        default: "sqrt",
        advanced: true,
      },
      //   {
      //     name: "bootstrap",
      //     label: "Bootstrap",
      //     description: "Usually true; false is rare",
      //     type: "boolean",
      //     default: true,
      //     advanced: true,
      //   },
      {
        name: "random_state",
        label: "Random State",
        description: "Ensures reproducibility",
        type: "number",
        min: 0,
        max: 9999,
        default: 42,
        advanced: true,
      },
      //   {
      //     name: "n_jobs",
      //     label: "Number of Jobs",
      //     description: "Use all available cores",
      //     type: "select",
      //     selectType: "single",
      //     options: [-1],
      //     default: -1,
      //     advanced: true,
      //   },
    ],
  },
];
